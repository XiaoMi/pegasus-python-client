#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import pypegasus.base.ttypes
import pypegasus.replication.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class filter_type:
  FT_NO_FILTER = 0
  FT_MATCH_ANYWHERE = 1
  FT_MATCH_PREFIX = 2
  FT_MATCH_POSTFIX = 3

  _VALUES_TO_NAMES = {
    0: "FT_NO_FILTER",
    1: "FT_MATCH_ANYWHERE",
    2: "FT_MATCH_PREFIX",
    3: "FT_MATCH_POSTFIX",
  }

  _NAMES_TO_VALUES = {
    "FT_NO_FILTER": 0,
    "FT_MATCH_ANYWHERE": 1,
    "FT_MATCH_PREFIX": 2,
    "FT_MATCH_POSTFIX": 3,
  }


class update_request:
  """
  Attributes:
   - key
   - value
   - expire_ts_seconds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'key', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'value', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 2
    (3, TType.I32, 'expire_ts_seconds', None, None, ), # 3
  )

  def __init__(self, key=None, value=None, expire_ts_seconds=None,):
    self.key = key
    self.value = value
    self.expire_ts_seconds = expire_ts_seconds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.key = pypegasus.base.ttypes.blob()
          self.key.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = pypegasus.base.ttypes.blob()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.expire_ts_seconds = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_request')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRUCT, 1)
      self.key.write(oprot)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.expire_ts_seconds is not None:
      oprot.writeFieldBegin('expire_ts_seconds', TType.I32, 3)
      oprot.writeI32(self.expire_ts_seconds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.expire_ts_seconds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class update_response:
  """
  Attributes:
   - error
   - app_id
   - partition_index
   - decree
   - server
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.I32, 'app_id', None, None, ), # 2
    (3, TType.I32, 'partition_index', None, None, ), # 3
    (4, TType.I64, 'decree', None, None, ), # 4
    (5, TType.STRING, 'server', None, None, ), # 5
  )

  def __init__(self, error=None, app_id=None, partition_index=None, decree=None, server=None,):
    self.error = error
    self.app_id = app_id
    self.partition_index = partition_index
    self.decree = decree
    self.server = server

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.partition_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.decree = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.server = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_response')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 2)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.partition_index is not None:
      oprot.writeFieldBegin('partition_index', TType.I32, 3)
      oprot.writeI32(self.partition_index)
      oprot.writeFieldEnd()
    if self.decree is not None:
      oprot.writeFieldBegin('decree', TType.I64, 4)
      oprot.writeI64(self.decree)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 5)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.partition_index)
    value = (value * 31) ^ hash(self.decree)
    value = (value * 31) ^ hash(self.server)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class read_response:
  """
  Attributes:
   - error
   - value
   - app_id
   - partition_index
   - server
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRUCT, 'value', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 2
    (3, TType.I32, 'app_id', None, None, ), # 3
    (4, TType.I32, 'partition_index', None, None, ), # 4
    None, # 5
    (6, TType.STRING, 'server', None, None, ), # 6
  )

  def __init__(self, error=None, value=None, app_id=None, partition_index=None, server=None,):
    self.error = error
    self.value = value
    self.app_id = app_id
    self.partition_index = partition_index
    self.server = server

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = pypegasus.base.ttypes.blob()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.partition_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.server = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('read_response')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 3)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.partition_index is not None:
      oprot.writeFieldBegin('partition_index', TType.I32, 4)
      oprot.writeI32(self.partition_index)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 6)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.partition_index)
    value = (value * 31) ^ hash(self.server)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ttl_response:
  """
  Attributes:
   - error
   - ttl_seconds
   - app_id
   - partition_index
   - server
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.I32, 'ttl_seconds', None, None, ), # 2
    (3, TType.I32, 'app_id', None, None, ), # 3
    (4, TType.I32, 'partition_index', None, None, ), # 4
    None, # 5
    (6, TType.STRING, 'server', None, None, ), # 6
  )

  def __init__(self, error=None, ttl_seconds=None, app_id=None, partition_index=None, server=None,):
    self.error = error
    self.ttl_seconds = ttl_seconds
    self.app_id = app_id
    self.partition_index = partition_index
    self.server = server

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ttl_seconds = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.partition_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.server = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ttl_response')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.ttl_seconds is not None:
      oprot.writeFieldBegin('ttl_seconds', TType.I32, 2)
      oprot.writeI32(self.ttl_seconds)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 3)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.partition_index is not None:
      oprot.writeFieldBegin('partition_index', TType.I32, 4)
      oprot.writeI32(self.partition_index)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 6)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.ttl_seconds)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.partition_index)
    value = (value * 31) ^ hash(self.server)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_response:
  """
  Attributes:
   - error
   - count
   - app_id
   - partition_index
   - server
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.I64, 'count', None, None, ), # 2
    (3, TType.I32, 'app_id', None, None, ), # 3
    (4, TType.I32, 'partition_index', None, None, ), # 4
    None, # 5
    (6, TType.STRING, 'server', None, None, ), # 6
  )

  def __init__(self, error=None, count=None, app_id=None, partition_index=None, server=None,):
    self.error = error
    self.count = count
    self.app_id = app_id
    self.partition_index = partition_index
    self.server = server

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.partition_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.server = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_response')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 3)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.partition_index is not None:
      oprot.writeFieldBegin('partition_index', TType.I32, 4)
      oprot.writeI32(self.partition_index)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 6)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.partition_index)
    value = (value * 31) ^ hash(self.server)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class key_value:
  """
  Attributes:
   - key
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'key', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'value', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 2
  )

  def __init__(self, key=None, value=None,):
    self.key = key
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.key = pypegasus.base.ttypes.blob()
          self.key.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = pypegasus.base.ttypes.blob()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('key_value')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRUCT, 1)
      self.key.write(oprot)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class multi_put_request:
  """
  Attributes:
   - hash_key
   - kvs
   - expire_ts_seconds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'hash_key', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 1
    (2, TType.LIST, 'kvs', (TType.STRUCT,(key_value, key_value.thrift_spec)), None, ), # 2
    (3, TType.I32, 'expire_ts_seconds', None, None, ), # 3
  )

  def __init__(self, hash_key=None, kvs=None, expire_ts_seconds=None,):
    self.hash_key = hash_key
    self.kvs = kvs
    self.expire_ts_seconds = expire_ts_seconds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.hash_key = pypegasus.base.ttypes.blob()
          self.hash_key.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.kvs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = key_value()
            _elem5.read(iprot)
            self.kvs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.expire_ts_seconds = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multi_put_request')
    if self.hash_key is not None:
      oprot.writeFieldBegin('hash_key', TType.STRUCT, 1)
      self.hash_key.write(oprot)
      oprot.writeFieldEnd()
    if self.kvs is not None:
      oprot.writeFieldBegin('kvs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.kvs))
      for iter6 in self.kvs:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.expire_ts_seconds is not None:
      oprot.writeFieldBegin('expire_ts_seconds', TType.I32, 3)
      oprot.writeI32(self.expire_ts_seconds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hash_key)
    value = (value * 31) ^ hash(self.kvs)
    value = (value * 31) ^ hash(self.expire_ts_seconds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class multi_remove_request:
  """
  Attributes:
   - hash_key
   - sork_keys
   - max_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'hash_key', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 1
    (2, TType.LIST, 'sork_keys', (TType.STRUCT,(pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec)), None, ), # 2
    (3, TType.I64, 'max_count', None, None, ), # 3
  )

  def __init__(self, hash_key=None, sork_keys=None, max_count=None,):
    self.hash_key = hash_key
    self.sork_keys = sork_keys
    self.max_count = max_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.hash_key = pypegasus.base.ttypes.blob()
          self.hash_key.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sork_keys = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = pypegasus.base.ttypes.blob()
            _elem12.read(iprot)
            self.sork_keys.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.max_count = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multi_remove_request')
    if self.hash_key is not None:
      oprot.writeFieldBegin('hash_key', TType.STRUCT, 1)
      self.hash_key.write(oprot)
      oprot.writeFieldEnd()
    if self.sork_keys is not None:
      oprot.writeFieldBegin('sork_keys', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.sork_keys))
      for iter13 in self.sork_keys:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.max_count is not None:
      oprot.writeFieldBegin('max_count', TType.I64, 3)
      oprot.writeI64(self.max_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hash_key)
    value = (value * 31) ^ hash(self.sork_keys)
    value = (value * 31) ^ hash(self.max_count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class multi_remove_response:
  """
  Attributes:
   - error
   - count
   - app_id
   - partition_index
   - decree
   - server
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.I64, 'count', None, None, ), # 2
    (3, TType.I32, 'app_id', None, None, ), # 3
    (4, TType.I32, 'partition_index', None, None, ), # 4
    (5, TType.I64, 'decree', None, None, ), # 5
    (6, TType.STRING, 'server', None, None, ), # 6
  )

  def __init__(self, error=None, count=None, app_id=None, partition_index=None, decree=None, server=None,):
    self.error = error
    self.count = count
    self.app_id = app_id
    self.partition_index = partition_index
    self.decree = decree
    self.server = server

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.partition_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.decree = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.server = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multi_remove_response')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 3)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.partition_index is not None:
      oprot.writeFieldBegin('partition_index', TType.I32, 4)
      oprot.writeI32(self.partition_index)
      oprot.writeFieldEnd()
    if self.decree is not None:
      oprot.writeFieldBegin('decree', TType.I64, 5)
      oprot.writeI64(self.decree)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 6)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.partition_index)
    value = (value * 31) ^ hash(self.decree)
    value = (value * 31) ^ hash(self.server)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class multi_get_request:
  """
  Attributes:
   - hash_key
   - sork_keys
   - max_kv_count
   - max_kv_size
   - no_value
   - start_sortkey
   - stop_sortkey
   - start_inclusive
   - stop_inclusive
   - sort_key_filter_type
   - sort_key_filter_pattern
   - reverse
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'hash_key', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 1
    (2, TType.LIST, 'sork_keys', (TType.STRUCT,(pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec)), None, ), # 2
    (3, TType.I32, 'max_kv_count', None, None, ), # 3
    (4, TType.I32, 'max_kv_size', None, None, ), # 4
    (5, TType.BOOL, 'no_value', None, None, ), # 5
    (6, TType.STRUCT, 'start_sortkey', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'stop_sortkey', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 7
    (8, TType.BOOL, 'start_inclusive', None, None, ), # 8
    (9, TType.BOOL, 'stop_inclusive', None, None, ), # 9
    (10, TType.I32, 'sort_key_filter_type', None, None, ), # 10
    (11, TType.STRUCT, 'sort_key_filter_pattern', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 11
    (12, TType.BOOL, 'reverse', None, None, ), # 12
  )

  def __init__(self, hash_key=None, sork_keys=None, max_kv_count=None, max_kv_size=None, no_value=None, start_sortkey=None, stop_sortkey=None, start_inclusive=None, stop_inclusive=None, sort_key_filter_type=None, sort_key_filter_pattern=None, reverse=None,):
    self.hash_key = hash_key
    self.sork_keys = sork_keys
    self.max_kv_count = max_kv_count
    self.max_kv_size = max_kv_size
    self.no_value = no_value
    self.start_sortkey = start_sortkey
    self.stop_sortkey = stop_sortkey
    self.start_inclusive = start_inclusive
    self.stop_inclusive = stop_inclusive
    self.sort_key_filter_type = sort_key_filter_type
    self.sort_key_filter_pattern = sort_key_filter_pattern
    self.reverse = reverse

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.hash_key = pypegasus.base.ttypes.blob()
          self.hash_key.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sork_keys = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = pypegasus.base.ttypes.blob()
            _elem19.read(iprot)
            self.sork_keys.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.max_kv_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.max_kv_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.no_value = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.start_sortkey = pypegasus.base.ttypes.blob()
          self.start_sortkey.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.stop_sortkey = pypegasus.base.ttypes.blob()
          self.stop_sortkey.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.start_inclusive = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.stop_inclusive = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.sort_key_filter_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.sort_key_filter_pattern = pypegasus.base.ttypes.blob()
          self.sort_key_filter_pattern.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.reverse = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multi_get_request')
    if self.hash_key is not None:
      oprot.writeFieldBegin('hash_key', TType.STRUCT, 1)
      self.hash_key.write(oprot)
      oprot.writeFieldEnd()
    if self.sork_keys is not None:
      oprot.writeFieldBegin('sork_keys', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.sork_keys))
      for iter20 in self.sork_keys:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.max_kv_count is not None:
      oprot.writeFieldBegin('max_kv_count', TType.I32, 3)
      oprot.writeI32(self.max_kv_count)
      oprot.writeFieldEnd()
    if self.max_kv_size is not None:
      oprot.writeFieldBegin('max_kv_size', TType.I32, 4)
      oprot.writeI32(self.max_kv_size)
      oprot.writeFieldEnd()
    if self.no_value is not None:
      oprot.writeFieldBegin('no_value', TType.BOOL, 5)
      oprot.writeBool(self.no_value)
      oprot.writeFieldEnd()
    if self.start_sortkey is not None:
      oprot.writeFieldBegin('start_sortkey', TType.STRUCT, 6)
      self.start_sortkey.write(oprot)
      oprot.writeFieldEnd()
    if self.stop_sortkey is not None:
      oprot.writeFieldBegin('stop_sortkey', TType.STRUCT, 7)
      self.stop_sortkey.write(oprot)
      oprot.writeFieldEnd()
    if self.start_inclusive is not None:
      oprot.writeFieldBegin('start_inclusive', TType.BOOL, 8)
      oprot.writeBool(self.start_inclusive)
      oprot.writeFieldEnd()
    if self.stop_inclusive is not None:
      oprot.writeFieldBegin('stop_inclusive', TType.BOOL, 9)
      oprot.writeBool(self.stop_inclusive)
      oprot.writeFieldEnd()
    if self.sort_key_filter_type is not None:
      oprot.writeFieldBegin('sort_key_filter_type', TType.I32, 10)
      oprot.writeI32(self.sort_key_filter_type)
      oprot.writeFieldEnd()
    if self.sort_key_filter_pattern is not None:
      oprot.writeFieldBegin('sort_key_filter_pattern', TType.STRUCT, 11)
      self.sort_key_filter_pattern.write(oprot)
      oprot.writeFieldEnd()
    if self.reverse is not None:
      oprot.writeFieldBegin('reverse', TType.BOOL, 12)
      oprot.writeBool(self.reverse)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hash_key)
    value = (value * 31) ^ hash(self.sork_keys)
    value = (value * 31) ^ hash(self.max_kv_count)
    value = (value * 31) ^ hash(self.max_kv_size)
    value = (value * 31) ^ hash(self.no_value)
    value = (value * 31) ^ hash(self.start_sortkey)
    value = (value * 31) ^ hash(self.stop_sortkey)
    value = (value * 31) ^ hash(self.start_inclusive)
    value = (value * 31) ^ hash(self.stop_inclusive)
    value = (value * 31) ^ hash(self.sort_key_filter_type)
    value = (value * 31) ^ hash(self.sort_key_filter_pattern)
    value = (value * 31) ^ hash(self.reverse)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class multi_get_response:
  """
  Attributes:
   - error
   - kvs
   - app_id
   - partition_index
   - server
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.LIST, 'kvs', (TType.STRUCT,(key_value, key_value.thrift_spec)), None, ), # 2
    (3, TType.I32, 'app_id', None, None, ), # 3
    (4, TType.I32, 'partition_index', None, None, ), # 4
    None, # 5
    (6, TType.STRING, 'server', None, None, ), # 6
  )

  def __init__(self, error=None, kvs=None, app_id=None, partition_index=None, server=None,):
    self.error = error
    self.kvs = kvs
    self.app_id = app_id
    self.partition_index = partition_index
    self.server = server

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.kvs = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = key_value()
            _elem26.read(iprot)
            self.kvs.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.partition_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.server = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multi_get_response')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.kvs is not None:
      oprot.writeFieldBegin('kvs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.kvs))
      for iter27 in self.kvs:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 3)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.partition_index is not None:
      oprot.writeFieldBegin('partition_index', TType.I32, 4)
      oprot.writeI32(self.partition_index)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 6)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.kvs)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.partition_index)
    value = (value * 31) ^ hash(self.server)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_scanner_request:
  """
  Attributes:
   - start_key
   - stop_key
   - start_inclusive
   - stop_inclusive
   - batch_size
   - no_value
   - hash_key_filter_type
   - hash_key_filter_pattern
   - sort_key_filter_type
   - sort_key_filter_pattern
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'start_key', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'stop_key', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 2
    (3, TType.BOOL, 'start_inclusive', None, None, ), # 3
    (4, TType.BOOL, 'stop_inclusive', None, None, ), # 4
    (5, TType.I32, 'batch_size', None, None, ), # 5
    (6, TType.BOOL, 'no_value', None, None, ), # 6
    (7, TType.I32, 'hash_key_filter_type', None, None, ), # 7
    (8, TType.STRUCT, 'hash_key_filter_pattern', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 8
    (9, TType.I32, 'sort_key_filter_type', None, None, ), # 9
    (10, TType.STRUCT, 'sort_key_filter_pattern', (pypegasus.base.ttypes.blob, pypegasus.base.ttypes.blob.thrift_spec), None, ), # 10
  )

  def __init__(self, start_key=None, stop_key=None, start_inclusive=None, stop_inclusive=None, batch_size=None, no_value=None, hash_key_filter_type=None, hash_key_filter_pattern=None, sort_key_filter_type=None, sort_key_filter_pattern=None,):
    self.start_key = start_key
    self.stop_key = stop_key
    self.start_inclusive = start_inclusive
    self.stop_inclusive = stop_inclusive
    self.batch_size = batch_size
    self.no_value = no_value
    self.hash_key_filter_type = hash_key_filter_type
    self.hash_key_filter_pattern = hash_key_filter_pattern
    self.sort_key_filter_type = sort_key_filter_type
    self.sort_key_filter_pattern = sort_key_filter_pattern

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.start_key = pypegasus.base.ttypes.blob()
          self.start_key.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.stop_key = pypegasus.base.ttypes.blob()
          self.stop_key.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.start_inclusive = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.stop_inclusive = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.batch_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.no_value = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.hash_key_filter_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.hash_key_filter_pattern = pypegasus.base.ttypes.blob()
          self.hash_key_filter_pattern.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.sort_key_filter_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.sort_key_filter_pattern = pypegasus.base.ttypes.blob()
          self.sort_key_filter_pattern.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_scanner_request')
    if self.start_key is not None:
      oprot.writeFieldBegin('start_key', TType.STRUCT, 1)
      self.start_key.write(oprot)
      oprot.writeFieldEnd()
    if self.stop_key is not None:
      oprot.writeFieldBegin('stop_key', TType.STRUCT, 2)
      self.stop_key.write(oprot)
      oprot.writeFieldEnd()
    if self.start_inclusive is not None:
      oprot.writeFieldBegin('start_inclusive', TType.BOOL, 3)
      oprot.writeBool(self.start_inclusive)
      oprot.writeFieldEnd()
    if self.stop_inclusive is not None:
      oprot.writeFieldBegin('stop_inclusive', TType.BOOL, 4)
      oprot.writeBool(self.stop_inclusive)
      oprot.writeFieldEnd()
    if self.batch_size is not None:
      oprot.writeFieldBegin('batch_size', TType.I32, 5)
      oprot.writeI32(self.batch_size)
      oprot.writeFieldEnd()
    if self.no_value is not None:
      oprot.writeFieldBegin('no_value', TType.BOOL, 6)
      oprot.writeBool(self.no_value)
      oprot.writeFieldEnd()
    if self.hash_key_filter_type is not None:
      oprot.writeFieldBegin('hash_key_filter_type', TType.I32, 7)
      oprot.writeI32(self.hash_key_filter_type)
      oprot.writeFieldEnd()
    if self.hash_key_filter_pattern is not None:
      oprot.writeFieldBegin('hash_key_filter_pattern', TType.STRUCT, 8)
      self.hash_key_filter_pattern.write(oprot)
      oprot.writeFieldEnd()
    if self.sort_key_filter_type is not None:
      oprot.writeFieldBegin('sort_key_filter_type', TType.I32, 9)
      oprot.writeI32(self.sort_key_filter_type)
      oprot.writeFieldEnd()
    if self.sort_key_filter_pattern is not None:
      oprot.writeFieldBegin('sort_key_filter_pattern', TType.STRUCT, 10)
      self.sort_key_filter_pattern.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.start_key)
    value = (value * 31) ^ hash(self.stop_key)
    value = (value * 31) ^ hash(self.start_inclusive)
    value = (value * 31) ^ hash(self.stop_inclusive)
    value = (value * 31) ^ hash(self.batch_size)
    value = (value * 31) ^ hash(self.no_value)
    value = (value * 31) ^ hash(self.hash_key_filter_type)
    value = (value * 31) ^ hash(self.hash_key_filter_pattern)
    value = (value * 31) ^ hash(self.sort_key_filter_type)
    value = (value * 31) ^ hash(self.sort_key_filter_pattern)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class scan_request:
  """
  Attributes:
   - context_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'context_id', None, None, ), # 1
  )

  def __init__(self, context_id=None,):
    self.context_id = context_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.context_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('scan_request')
    if self.context_id is not None:
      oprot.writeFieldBegin('context_id', TType.I64, 1)
      oprot.writeI64(self.context_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.context_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class scan_response:
  """
  Attributes:
   - error
   - kvs
   - context_id
   - app_id
   - partition_index
   - server
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.LIST, 'kvs', (TType.STRUCT,(key_value, key_value.thrift_spec)), None, ), # 2
    (3, TType.I64, 'context_id', None, None, ), # 3
    (4, TType.I32, 'app_id', None, None, ), # 4
    (5, TType.I32, 'partition_index', None, None, ), # 5
    (6, TType.STRING, 'server', None, None, ), # 6
  )

  def __init__(self, error=None, kvs=None, context_id=None, app_id=None, partition_index=None, server=None,):
    self.error = error
    self.kvs = kvs
    self.context_id = context_id
    self.app_id = app_id
    self.partition_index = partition_index
    self.server = server

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.kvs = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = key_value()
            _elem33.read(iprot)
            self.kvs.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.context_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.partition_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.server = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('scan_response')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.kvs is not None:
      oprot.writeFieldBegin('kvs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.kvs))
      for iter34 in self.kvs:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.context_id is not None:
      oprot.writeFieldBegin('context_id', TType.I64, 3)
      oprot.writeI64(self.context_id)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 4)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.partition_index is not None:
      oprot.writeFieldBegin('partition_index', TType.I32, 5)
      oprot.writeI32(self.partition_index)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 6)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.kvs)
    value = (value * 31) ^ hash(self.context_id)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.partition_index)
    value = (value * 31) ^ hash(self.server)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
